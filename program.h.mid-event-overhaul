enum {
  SGS_TYPE_TOP = 0,               /* value */
  SGS_TYPE_NESTED,                /* value, flag */
  SGS_TYPE_SET,                   /* flag */
  SGS_TYPE_SETTOP = SGS_TYPE_SET, /* value */
  SGS_TYPE_SETNESTED,             /* value (sets NESTED, not itself NESTED!) */
  SGS_TYPE_ENV                    /* value */
};

enum {
  SGS_FLAG_EXEC = 1<<0,
  SGS_FLAG_ENTERED = 1<<1
};

enum {
  SGS_ATTR_FREQRATIO = 1<<0,
  SGS_ATTR_DYNFREQRATIO = 1<<1
};

enum {
  SGS_WAVE_SIN = 0,
  SGS_WAVE_SQR,
  SGS_WAVE_TRI,
  SGS_WAVE_SAW
};

enum {
  SGS_WAVE = 1<<0,
  SGS_TIME = 1<<1,
  SGS_SILENCE = 1<<2,
  SGS_FREQ = 1<<3,
  SGS_DYNFREQ = 1<<4,
  SGS_PHASE = 1<<5,
  SGS_AMP = 1<<6,
  SGS_DYNAMP = 1<<7,
  SGS_PANNING = 1<<8,
  SGS_ATTR = 1<<9,
  SGS_VALUES = 10
};

enum {
  SGS_PMODS = 1<<0,
  SGS_FMODS = 1<<1,
  SGS_AMODS = 1<<2
};

typedef struct SGSProgramOperator {
  struct SGSProgramOperator *next;
  struct SGSProgramEvent *last_event; /* used by parser */
  float delay;
  uchar type;
  uint id;
  struct SGSProgramOperator *link;
} SGSProgramOperator;

typedef struct SGSProgramOperatorChain {
  uint count;
  SGSProgramOperator *chain;
} SGSProgramOperatorChain;

typedef struct SGSProgramEvent {
  struct SGSProgramEvent *next, *opprev, *opnext;
  SGSProgramOperator *operator;
  float wait;
  uint id;
  /* operator parameters: */
  uchar wave;
  float time, silence, freq, dynfreq, phase, amp, dynamp, panning;
  SGSProgramOperatorChain pmod, fmod, amod;
  ushort values;
  uchar attr;
  uchar mods;
} SGSProgramEvent;

struct SGSProgram {
  SGSProgramOperator *oplist;
  SGSProgramEvent *evlist;
  uint opc;
  uint top_opc; /* nodes >= topc are nested ones, ids starting over from 0 */
  uint evc;
};
